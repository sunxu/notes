linux下查看当前shell方法。
网上看到的，很好用，收藏一下。

一、查看当前发行版可以使用的shell：
chao@chao:~$ cat /etc/shells 
# /etc/shells: valid login shells
/bin/csh
/bin/sh
/usr/bin/es
/usr/bin/ksh
/bin/ksh
/usr/bin/rc
/usr/bin/tcsh
/bin/tcsh
/usr/bin/esh
/bin/dash
/bin/bash
/bin/rbash
/usr/bin/screen

二、查看当前使用的 shell :  
chao@chao:~$ echo $0
bash


三、查看当前用户(默 认)使用的shell: 
chao@chao:~$ echo $SHELL
/bin/bash

四、环境变量中shell的匹配查找
chao@chao:~$ env | grep SHELL
SHELL=/bin/bash

四、口令文件中 shell的匹配查找
chao@chao:~$ cat /etc/passwd | grep chao
chao:x:1000:1000:chao,340,6733,6733:/home/chao:/bin/bash

五、查看当前进程
chao@chao:~$ ps
PID TTY          TIME CMD
4507 pts/0    00:00:00 bash
8688 pts/0    00:00:00 ps


六、先查看当前shell的pid，再定位到此 shell进程
chao@chao:~$ echo $$
4507
chao@chao:~$ ps -ef |grep 3052
chao      8710  4507  0 15:30 pts/0    00:00:00 grep --color=auto 3052

附：一条命令即可实现：
chao@chao:~$ ps -ef |grep `echo $$` |grep -v grep |grep -v ps
chao      4507  4505  0 09:30 pts/0    00:00:00 bash

enca

apt-get install im-switch

With recent kernels (>= 2.6.35), you can change the size of a pipe with

fcntl(fd, F_SETPIPE_SZ, size)
where size is a long. The maximum size is in /proc/sys/fs/pipe-max-size.


http://ardownload.adobe.com/pub/adobe/reader/unix/8.x/8.1.7/chs/AdobeReader_chs-8.1.7-1.i386.deb



"    -> Visual mode related
"    -> Moving around, tabs and buffers
"    -> Status line
"    -> Editing mappings
"    -> vimgrep searching and cope displaying
"    -> Spell checking
"    -> Misc
"    -> Helper functions
"    -> Window

vim --version | grep fall-back | awk -F ":" '{print $2}'

git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen
(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --

git config --global alias.lg "log --color --graph
--pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen (%cr) %C(bold
blue)<%an>%Creset' --abbrev-commit --"

git lg


for f in split(glob('~/.vim/plugin/settings/*.vim'), '\n')
  exe 'source' f
endfor

:help modeline 模式行

svn checkout http://vimide.googlecode.com/svn/trunk/linux vimide





[user]
	name = sunxu
	email = sunxu.name@gmail.com
[core]
	editor = vim
[alias]
	co = checkout
	ci = commit
	st = status
    br = branch
    df = diff
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen (%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --




    error: pasting "." and "x" does not give a valid preprocessing token
    Make sure you are not doing the mistake of putting "##" before macro
    argument i.e VAR, 
    it should be put only between macro argument and the string to be
    concatenated.

    Change something like this 
    "arg->VAR. ## VAR ## _val," 
    to "arg->VAR.VAR ## _val," 

    Also, no need of "##" for the line below for calling the function.

    "G(win-> ## FUNC,(c, win," 
    to "G(win->FUNC,(c, win,"


    error: pasting "::" and "xyz" does not give a valid preprocessing token
    if u get the error like

        "error: pasting "::" and "xyz" does not give a valid preprocessing
        token"

        then 

        Remove ## before scope resolution opeator. 
        For e.g change "ErrorId::##TypeId" to "ErrorId::TypeId"

warning: push.default 未设置，它的默认值将会在 Git 2.0 由 'matching'
修改为 'simple'。若要不再显示本信息并在其默认值改变后维持当前使用习惯，
进行如下设置：

  git config --global push.default matching

若要不再显示本信息并从现在开始采用新的使用习惯，设置：

  git config --global push.default simple

参见 'git help config' 并查找 'push.default' 以获取更多信息。
（'simple' 模式由 Git 1.7.11 版本引入。如果您有时要使用老版本的 Git，
为保持兼容，请用 'current' 代替 'simple' 模式



